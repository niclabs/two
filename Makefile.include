# -*- makefile -*-

ifndef TWO
  ${error TWO not defined! You must specify where two resides}
endif

# Configure output directories
# Path for final binaries to be stored
TARGET_DIR ?= $(call QUALIFY_PATH,${TWO},bin)

# Build dir is for temporary files
BUILD_DIR ?= $(call QUALIFY_PATH,${TWO},build)

ifeq ($(DEFINES),)
  -include Makefile.defines
  ifneq ($(DEFINES),)
    ${info using saved defines '$(DEFINES)'}
  endif
endif

#More debug information when running in CI
ifdef CI
  ifeq ($(CI),true)
    QUIET = 0
  endif
endif

# CANONICAL_PATH - Given one or more paths, converts the paths to the canonical
#   form. The canonical form is the path, relative to the project's top-level
#   directory (the directory from which "make" is run), and without
#   any "./" or "../" sequences. For paths that are not  located below the
#   top-level directory, the canonical form is the absolute path (i.e. from
#   the root of the filesystem) also without "./" or "../" sequences.
define CANONICAL_PATH
$(patsubst ${CURDIR}/%,%,$(abspath ${1}))
endef

# QUALIFY_PATH - Given a "root" directory and one or more paths, qualifies the
#   paths using the "root" directory (i.e. appends the root directory name to
#   the paths) except for paths that are absolute.
define QUALIFY_PATH
$(addprefix ${1}/,$(filter-out /%,${2}))$(filter /%,${2})
endef

# Target directories
OBJECTDIR = $(BUILD_DIR)/obj
TWO_TARGET_LIB = $(BUILD_DIR)/two.a

TWO_OBJECTS = $(addprefix ${OBJECTDIR}/,$(patsubst %.c,%.o,$(TWO_SOURCES)))
OBJECTS = $(addprefix ${OBJECTDIR}/,$(patsubst %.c,%.o,$(SOURCES)))

uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))

# Provide way to create $(BUILD_DIR) if it has been removed by make clean
$(TARGET_DIR):
$(OBJECTDIR):
	$(TRACE_MKDIR)
	$(Q)mkdir -p $@

# Module configuration (under src/)
# One big module under src for now
MODULES += .

MODULEDIRS = $(call QUALIFY_PATH,${TWO},$(call CANONICAL_PATH,$(addprefix src/,$(MODULES))))
UNIQUEMODULES = $(call uniq,$(MODULEDIRS))
MODULES_SOURCES = $(foreach d, $(UNIQUEMODULES), ${subst ${d}/,,${wildcard $(d)/*.c}})

# Update sources
TWO_SOURCES += $(MODULES_SOURCES)

# Include module-specific makefiles
MODULES_INCLUDES = ${wildcard ${foreach d, $(UNIQUEMODULES), $(d)/Makefile.${notdir $(d)}}}

### Perform an immediate expansion of MODULES_INCLUDES and store it in a
### variable. This will allow us to subsequently filter-out module Makefiles
### that were included in the first pass, such that we don't end up including
### them twice.
MODULES_INCLUDED_FIRST_PASS := $(MODULES_INCLUDES)
include $(MODULES_INCLUDED_FIRST_PASS)

# Iterate once more: include the modules added from the previous include.
# Only works with one level of nested module inclusion.
include $(filter-out $(MODULES_INCLUDED_FIRST_PASS),$(MODULES_INCLUDES))

### Verbosity control. Use  make QUIET=0  to get verbose builds.

ifeq ($(QUIET),0)
  TRACE_CC =
  TRACE_LD =
  TRACE_AR =
  TRACE_AS =
  TRACE_MKDIR =
  TRACE_RM =
  TRACE_CP =
  Q=
else
  MAKEFLAGS = --no-print-directory --quiet
  TRACE_CC = @echo "  CC       " $<
  TRACE_LD = @echo "  LD       " $@
  TRACE_AR = @echo "  AR       " $@
  TRACE_AS = @echo "  AS       " $<
  TRACE_MKDIR = @echo "  MKDIR    " $@
  TRACE_RM  = @echo "  RM       " ${1}
  TRACE_CP  = @echo "  CP       " $< "-->" $@
  Q=@
endif

### Forward comma-separated list of arbitrary defines to the compiler
COMMA := ,
CFLAGS += ${addprefix -D,${subst $(COMMA), ,$(DEFINES)}}

SOURCEDIRS = . $(PROJECTDIRS) $(MODULEDIRS)

vpath %.c $(SOURCEDIRS)

CFLAGS += $(addprefix -I,$(SOURCEDIRS))

### Automatic dependency generation

ifneq ($(MAKECMDGOALS),clean)
-include ${addprefix $(OBJECTDIR)/,$(TWO_SOURCES:.c=.d) \
		                           $(SOURCES:.c=.d)}
endif

### See http://make.paulandlesley.org/autodep.html#advanced

define FINALIZE_DEPENDENCY
cp $(@:.o=.d) $(@:.o=.$$$$); \
sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
    -e '/^$$/ d' -e 's/$$/ :/' < $(@:.o=.$$$$) >> $(@:.o=.d); \
rm -f $(@:.o=.$$$$)
endef

.PHONY: clean distclean
clean:
	$(call TRACE_RM,*.d *.o $(CLEAN) $(OBJECTDIR))
	-$(Q)rm -f *.d *.o $(CLEAN)
	-$(Q)rm -rf $(OBJECTDIR)

distclean:
	$(call TRACE_RM,$(BUILD_DIR) $(TARGET_DIR))
	-$(Q)rm -rf $(BUILD_DIR)
	-$(Q)rm -rf $(TARGET_DIR)

$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -MMD -c $< -o $@
	@$(FINALIZE_DEPENDENCY)

%.o: %.c
	$(TRACE_CC)
	$(Q)$(CC) $(CFLAGS) -c $< -o $@

$(TWO_TARGET_LIB): $(TWO_OBJECTS)
	$(TRACE_AR)
	$(Q)$(AR) $(ARFLAGS) $@ $^

$(TARGET_DIR)/%: %.o $(OBJECTS) $(TWO_TARGET_LIB)
	$(Q)mkdir -p $(dir $@)
	$(TRACE_LD)
	$(Q)$(CC) $(LDFLAGS) -o $@ ${filter-out %.a,$^} ${filter %.a,$^} $(LDLIBS)

.PRECIOUS: $(TARGET_DIR)/%

# Cancel the predefined implict rule for compiling and linking
# a single C source into a binary to force GNU make to consider
# the match-anything rule below instead.
%: %.c

# Match-anything pattern rule to allow the project makefiles to
# abstract from the actual binary name. It needs to contain some
# command in order to be a rule, not just a prerequisite.
%: $(TARGET_DIR)/%
	@
