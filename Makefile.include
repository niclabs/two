# Generic GCC Makefile based on
# https://github.com/mbcrawfo/GenericMakefile/blob/master/c/Makefile
PLATFORM ?= linux

# Some configuration variables
BASEDIR			?= $(dir $(lastword $(MAKEFILE_LIST)))
BUILDDIR		?= $(BASEDIR)/build
TARGETDIR		?= $(BUILDDIR)/$(PLATFORM)
DEPSDIR			?= $(BASEDIR)/deps
PLATFORMDIR		?= $(BASEDIR)/platform
SRCDIR			?= $(BASEDIR)/src
TESTSDIR		?= $(BASEDIR)/tests

# Make all paths absolute.
override BASEDIR        := $(abspath $(BASEDIR))
override BUILDDIR       := $(abspath $(BUILDDIR))
override TARGETDIR      := $(abspath $(TARGETDIR))
override DEPSDIR        := $(abspath $(DEPSDIR))
override PLATFORMDIR    := $(abspath $(PLATFORMDIR))
override SRCDIR         := $(abspath $(SRCDIR))
override TESTSDIR       := $(abspath $(TESTSDIR))

# Shell used in this makefile
# bash is used for 'echo -en'
SHELL = /bin/bash

# Target OS dependent CFLAGS
CFLAGS += -D__$(PLATFORM)

# Quiet option, to output compile and link commands
QUIET ?= 1
ifeq ($(QUIET),1)
  Q=@
  MAKEFLAGS += --no-print-directory
else
  Q=
endif

# get host operating system
OS := $(shell uname -s)

# git command
GIT ?= git

# Version macros
# Comment/remove this section to remove versioning
USE_VERSION := false
# If this isn't a git repo or the repo has no tags, git describe will return non-zero
ifeq ($(shell git describe > /dev/null 2>&1 ; echo $$?), 0)
	USE_VERSION := true
	VERSION := $(shell git describe --tags --long --dirty --always | \
		sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)-\?.*-\([0-9]*\)-\(.*\)/\1 \2 \3 \4 \5/g')
	VERSION_MAJOR := $(word 1, $(VERSION))
	VERSION_MINOR := $(word 2, $(VERSION))
	VERSION_PATCH := $(word 3, $(VERSION))
	VERSION_REVISION := $(word 4, $(VERSION))
	VERSION_HASH := $(word 5, $(VERSION))
	VERSION_STRING := \
		"$(VERSION_MAJOR).$(VERSION_MINOR).$(VERSION_PATCH).$(VERSION_REVISION)-$(VERSION_HASH)"
	override CFLAGS := $(CFLAGS) \
		-D VERSION_MAJOR=$(VERSION_MAJOR) \
		-D VERSION_MINOR=$(VERSION_MINOR) \
		-D VERSION_PATCH=$(VERSION_PATCH) \
		-D VERSION_REVISION=$(VERSION_REVISION) \
		-D VERSION_HASH=\"$(VERSION_HASH)\"
endif


# Check application name
APPLICATION := $(strip $(APPLICATION))
ifeq (,$(APPLICATION))
  $(error An application name must be specified as APPLICATION.)
endif
##################
# Begin targets
#################
# Export all variables
export

# Create build directories
ALLDIRS := $(TARGETDIR) $(DEPSDIR)

$(ALLDIRS):
	@echo "Creating $@"
	@mkdir -p $@

# Removes all build files
.PHONY: clean
clean:
	@echo "Delete build files"
	@$(RM) -r $(BUILDDIR)/*

# Test target
test: $(ALLDIRS) $(TESTSDIR)
	@$(MAKE) -C $(TESTSDIR) $@

# Catch all other rules
.DEFAULT:
  ifeq ($(wildcard $(PLATFORMDIR)/$(PLATFORM)/Makefile.include),)
    $(error No such file $(PLATFORMDIR)/$(PLATFORM)/Makefile.include))
  endif 
	
    # Create directories manually
	$(foreach dir,$(ALLDIRS),\
		$(if $(wildcard $(dir)),,\
			$(info Creating $(dir))\
			$(shell mkdir -p $(dir))\
		)\
	)
	@$(MAKE) -f $(PLATFORMDIR)/$(PLATFORM)/Makefile.include $@

# Target OS must define 'all' Makefile target
.DEFAULT_GOAL := all